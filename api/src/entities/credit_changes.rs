//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use async_graphql::{Enum, Result};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "credit_changes")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub initiated_by: Uuid,
    pub credits: i64,
    pub code: Code,
    pub created_at: DateTime,
}

#[derive(Enum, Debug, Clone, Copy, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum Code {
    #[graphql(name = "CREDIT_PURCHASE")]
    #[sea_orm(num_value = 0)]
    CreditPurchase,
    #[graphql(name = "SOLANA_CREATE_DROP")]
    #[sea_orm(num_value = 1)]
    SolanaCreateDrop,
    #[graphql(name = "POLYGON_CREATE_DROP")]
    #[sea_orm(num_value = 2)]
    PolygonCreateDrop,
    #[graphql(name = "SOLANA_MINT_EDITION")]
    #[sea_orm(num_value = 3)]
    SolanaMintEdition,
    #[graphql(name = "SOLANA_TRANSFER_ASSET")]
    #[sea_orm(num_value = 4)]
    SolanaTransferAsset,
    #[graphql(name = "SOLANA_RETRY_MINT")]
    #[sea_orm(num_value = 5)]
    SolanaRetryMint,
}

impl From<Code> for i32 {
    fn from(value: Code) -> Self {
        match value {
            Code::CreditPurchase => 0,
            Code::SolanaCreateDrop => 1,
            Code::PolygonCreateDrop => 2,
            Code::SolanaMintEdition => 3,
            Code::SolanaTransferAsset => 4,
            Code::SolanaRetryMint => 5,
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
